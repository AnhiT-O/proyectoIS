# Generated by Django 5.2.5 on 2025-08-22 15:49

from django.db import migrations
from django.contrib.auth.models import Permission


def crear_roles_predefinidos(apps, schema_editor):
    """
    Función para crear los roles predefinidos del sistema
    """
    Roles = apps.get_model('roles', 'Roles')
    
    # Definir los roles predefinidos con sus descripciones
    roles_data = [
        {
            'name': 'administrador',
            'descripcion': 'Usuario con acceso completo al sistema. Puede gestionar usuarios, '
                          'configurar el sistema, acceder a todos los módulos y realizar '
                          'cualquier operación administrativa.'
        },
        {
            'name': 'analista cambiario',
            'descripcion': 'Usuario especializado en análisis de operaciones cambiarias. '
                          'Puede revisar transacciones, generar reportes, analizar tendencias '
                          'del mercado y supervisar operaciones de cambio.'
        },
        {
            'name': 'operador',
            'descripcion': 'Usuario encargado de realizar operaciones básicas del sistema. '
                          'Puede registrar transacciones, gestionar clientes y realizar '
                          'operaciones de cambio según los límites establecidos.'
        }
    ]
    
    # Crear los roles si no existen
    for rol_data in roles_data:
        rol, created = Roles.objects.get_or_create(
            name=rol_data['name'],
            defaults={'descripcion': rol_data['descripcion']}
        )
        
        if created:
            print(f"Rol '{rol_data['name']}' creado exitosamente.")
        else:
            print(f"Rol '{rol_data['name']}' ya existe.")


def asignar_permisos_administrador(apps, schema_editor):
    """
    Función separada para asignar permisos al administrador
    """
    Roles = apps.get_model('roles', 'Roles')
    Permission = apps.get_model('auth', 'Permission')
    
    try:
        admin_role = Roles.objects.get(name='administrador')
        all_permissions = Permission.objects.all()
        
        # Obtener los IDs de todos los permisos y asignarlos
        permission_ids = list(all_permissions.values_list('id', flat=True))
        admin_role.permissions.set(permission_ids)
        
        print(f"Se asignaron {len(permission_ids)} permisos al rol administrador.")
    except Roles.DoesNotExist:
        print("Error: No se pudo encontrar el rol administrador para asignar permisos.")
    except Exception as e:
        print(f"Error al asignar permisos: {e}")


def crear_roles_y_asignar_permisos(apps, schema_editor):
    """
    Función principal que ejecuta la creación de roles y asignación de permisos
    """
    crear_roles_predefinidos(apps, schema_editor)
    # La asignación de permisos se hará después de que se ejecuten todas las migraciones
    # por lo que comentamos esta línea y la ejecutaremos en una operación separada
    # asignar_permisos_administrador(apps, schema_editor)


def eliminar_roles_predefinidos(apps, schema_editor):
    """
    Función para revertir la creación de roles predefinidos
    """
    Roles = apps.get_model('roles', 'Roles')
    
    roles_predefinidos = ['administrador', 'analista cambiario', 'operador']
    
    for nombre_rol in roles_predefinidos:
        try:
            rol = Roles.objects.get(name=nombre_rol)
            rol.delete()
            print(f"Rol '{nombre_rol}' eliminado.")
        except Roles.DoesNotExist:
            print(f"Rol '{nombre_rol}' no encontrado para eliminar.")


class Migration(migrations.Migration):

    dependencies = [
        ('roles', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),  # Dependencia para permisos
        ('contenttypes', '0002_remove_content_type_name'),  # Dependencia para content types
    ]

    operations = [
        migrations.RunPython(crear_roles_y_asignar_permisos, eliminar_roles_predefinidos),
    ]
