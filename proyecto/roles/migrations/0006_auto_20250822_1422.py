# Generated by Django 5.2.5 on 2025-08-22 14:22

from django.db import migrations


def limpiar_roles_no_deseados(apps, schema_editor):
    """Eliminar los roles que no son necesarios"""
    Roles = apps.get_model('roles', 'Roles')
    Group = apps.get_model('auth', 'Group')
    
    roles_a_eliminar = ['Administrador', 'Gerente', 'Empleado', 'Cliente']
    
    for nombre in roles_a_eliminar:
        try:
            # Eliminar del modelo Roles
            rol = Roles.objects.get(name=nombre)
            rol.delete()
            print(f"Rol '{nombre}' eliminado")
        except Roles.DoesNotExist:
            pass
        
        try:
            # Eliminar del modelo Group también
            grupo = Group.objects.get(name=nombre)
            grupo.delete()
            print(f"Grupo '{nombre}' eliminado")
        except Group.DoesNotExist:
            pass


def restaurar_roles_eliminados(apps, schema_editor):
    """Función de rollback - restaurar los roles eliminados"""
    Roles = apps.get_model('roles', 'Roles')
    
    roles_a_restaurar = [
        {'name': 'Administrador', 'descripcion': 'Administrador del sistema con acceso completo a todas las funcionalidades'},
        {'name': 'Gerente', 'descripcion': 'Gerente con acceso a funciones de gestión y supervisión'},
        {'name': 'Empleado', 'descripcion': 'Empleado con acceso a funciones básicas del sistema'},
        {'name': 'Cliente', 'descripcion': 'Cliente con acceso limitado para consultar sus operaciones'}
    ]
    
    for rol_data in roles_a_restaurar:
        rol, created = Roles.objects.get_or_create(
            name=rol_data['name'],
            defaults={'descripcion': rol_data['descripcion']}
        )
        if created:
            print(f"Rol '{rol.name}' restaurado")


class Migration(migrations.Migration):

    dependencies = [
        ('roles', '0005_auto_20250822_1419'),
    ]

    operations = [
        migrations.RunPython(limpiar_roles_no_deseados, restaurar_roles_eliminados),
    ]
