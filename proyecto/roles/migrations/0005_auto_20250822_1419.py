# Generated by Django 5.2.5 on 2025-08-22 14:19

from django.db import migrations


def crear_roles_predefinidos(apps, schema_editor):
    """Función para convertir los grupos existentes en roles con descripción"""
    Roles = apps.get_model('roles', 'Roles')
    Group = apps.get_model('auth', 'Group')
    
    roles_descripciones = {
        'administrador': 'Administrador del sistema con acceso completo a todas las funcionalidades',
        'analista cambiario': 'Analista especializado en operaciones de cambio de divisas y análisis de mercado',
        'operador': 'Operador encargado de ejecutar transacciones y operaciones básicas del sistema'
    }
    
    for nombre, descripcion in roles_descripciones.items():
        try:
            # Buscar el grupo existente
            grupo = Group.objects.get(name=nombre)
            
            # Verificar si ya existe un rol para este grupo
            if not Roles.objects.filter(group_ptr_id=grupo.id).exists():
                # Crear el objeto Roles asociado al grupo existente
                rol = Roles(group_ptr_id=grupo.id, descripcion=descripcion)
                rol.__dict__.update(grupo.__dict__)  # Copiar los datos del grupo
                rol.save()
                print(f"Rol '{nombre}' creado con descripción")
            else:
                # Actualizar la descripción si ya existe
                rol = Roles.objects.get(group_ptr_id=grupo.id)
                rol.descripcion = descripcion
                rol.save()
                print(f"Rol '{nombre}' actualizado con nueva descripción")
                
        except Group.DoesNotExist:
            # Si el grupo no existe, crear tanto el grupo como el rol
            rol = Roles.objects.create(name=nombre, descripcion=descripcion)
            print(f"Grupo y rol '{nombre}' creados desde cero")


def eliminar_roles_predefinidos(apps, schema_editor):
    """Función para eliminar solo las descripciones de los roles (rollback)"""
    Roles = apps.get_model('roles', 'Roles')
    
    nombres_roles = ['administrador', 'analista cambiario', 'operador']
    
    for nombre in nombres_roles:
        try:
            rol = Roles.objects.get(name=nombre)
            # Solo eliminar el objeto Roles, no el Group subyacente
            rol.delete()
            print(f"Descripción del rol '{nombre}' eliminada")
        except Roles.DoesNotExist:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('roles', '0004_roles_delete_rol'),
    ]

    operations = [
        migrations.RunPython(crear_roles_predefinidos, eliminar_roles_predefinidos),
    ]
